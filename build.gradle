buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }

    apply from: "https://dev.savage.games/commons.gradle"
}

plugins {
    id 'idea'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group 'dev.armadeus'
    version GIT_BRANCH

    ext {
        nexusUser = System.getenv("NEXUS_USR") ?: loadProperty("nexus.nachtraben.user")
        nexusPass = System.getenv("NEXUS_PSW") ?: loadProperty("nexus.nachtraben.pass")

        lombokVersion = '1.18.20'
        slf4jVersion = '1.7.30'
    }

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    compileJava.options.encoding = javadoc.options.encoding = "UTF-8"

    repositories {
        mavenCentral()
        maven {
            name = "NachtRaben-Nexus"
            url = "https://nachtraben.com/nexus/repository/maven-public/"
            credentials {
                username = nexusUser
                password = nexusPass
            }
        }
    }

    // Repositories for publishing
    publishing {
        repositories {
            repositories {
                mavenLocal()
                maven {
                    credentials {
                        username "$nexusUser"
                        password "$nexusPass"
                    }
                    if (!project.version.endsWith('-SNAPSHOT')) {
                        url "https://nachtraben.com/nexus/repository/maven-releases"
                    } else {
                        url "https://nachtraben.com/nexus/repository/maven-snapshots"
                    }
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        archiveName = project.name + '-sources.jar'
        from project.sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        archiveName = rootProject.name + '-javadoc.jar'
        from javadoc.destinationDir
    }
}

